const request = require('supertest')
const app = require('../app')
const dbConnection = require('../connections/db_connection');
require("dotenv").config();

describe('Check Mutant Cross Test', () => {
    beforeAll( async () => {
        return dbConnection.connectDb(process.env.DB_NAME_TEST).then( async () => {
            console.log('DB connected!');
        });
    })

    it('Big DNA (10N) (Mutant)', async (done) => {
        const body = {
            "dna": [
                "CGGGCACCGC",
                "ATTCTGTGTC",
                "ATCTAAGCCA",
                "TTGCCCTATA",
                "AAAGTGGAGT",
                "CGAGACCACA",
                "AATTGTACAG",
                "TGGTGTGCGA",
                "TGAGATAGTG",
                "TTGGTTCCCC"
            ]
        };
        const res = await request(app)
            .post('/mutants')
            .send(body)
        expect(res.statusCode).toEqual(200)
        done()
    })

    it('Big DNA (10N) (Human)', async (done) => {
        const body = {
            "dna": [
                "CGGGCACCGC",
                "ATTCTGTGTC",
                "ATCTAAGCCA",
                "TTGCCCTATA",
                "AAAGTGGAGT",
                "CGAGACCACA",
                "AATTGTACAG",
                "TGGTGCGCGA",
                "TGAGATAGTG",
                "TTGGTTCTCC"
            ]
        };
        const res = await request(app)
            .post('/mutants')
            .send(body)
        expect(res.statusCode).toEqual(403)
        done()
    })

    it('Big DNA (50N) (Mutant)', async (done) => {
        const body = {
            "dna": [
                "AGACACTATAGACCTTGTTTGGCGGGTGGTAGATGAAAGGGCTGGGTTTA",
                "CTAAATGCACCCTCTGCTTGCAAGAGCCTTTATAAACAGAAATCAGAACG",
                "ACGACTAGTATTGGAGACGATTTCGGTCCGAGTAACCTGTGGTTCGCTAG",
                "CAAGTTTGTGCGATTCGCCGAGGTGTTAGGAGCTGTGCAGGTAGACCGTT",
                "TTAACGAACAAGCCGCTTAGATGTTCATCGGACGGTCAACTCGAGGTACG",
                "TTCGATACTATAAAGGGAGGGTGAGATGTTGTGCCACGAACGACCCGTCC",
                "TGTCGGGCCCGAGTTGTTGCTGTCGAAGCATCGTACAACGCCGCAGTTAG",
                "ACCCGGATCGTATGGAAAGCAGCCTGTGCCTCTTGCTAAGGTGTATGTCC",
                "ACGGTCATCTCGACCGTCTCAGTTTGACCCGCACTCATCACGCCGGCGGT",
                "TTCTCCCACCGGATCAACACCGTCCTCGAACATAGCGTGGCGCATTGTTG",
                "TGCGGACTGGGTGTTCACATCCACTGGTGCATTGGATGTCGTGAGGTCGA",
                "TGGCAGGGTAGAAGCTAGCAGCAGCTGCACGCGTCTGATGCAGTGGTCCG",
                "CTAGTGGGACGTATTCGGTCAGGCAGCATATTGCGAACCTAATTCCTACA",
                "TGATAACAGAGAGCTCGGCGTTCTGATCATCGTCGGGATGGATCTCGAGA",
                "TAGCCACCCATGGTATTAAGCGTCCTGTTTACGCAATTACTCCTATTATC",
                "CTCGGTAACGTCCGTTGTTGCCATCGAGTACATTGTACTGCGAGTAAGCG",
                "AGCACCGACAGAAGCACCGTATAGTCAACGGGTGTCTCCCACGCATAGCG",
                "GGACGCTGGCGTTAGCCTTGACGCGCCGCAGCGGAGGGATACGGGCTCAT",
                "TTACCAGGTTATCCGGAGGTTGTAGAGGCGTGCCACGGCTGTTAGTTCTT",
                "CACCAACAAATAAGTGTAACTGTATACAATTACACCTTATACATTTAGTT",
                "AACGTGTCAGACTGGTACTGGATACCTCAGGCCGCATAGTGAGCACCGCT",
                "TGAGGCCCTGCTGCAGAGCTATTGGCGCCGGCCGCCGAACAAGCATTTGG",
                "GCCACTGCCAAGACGATAACCCTGTCTGTTATTACTGAAGCAGGACGCAA",
                "CGTGGTCCCTCGTTTAGTGATATGCGAATACCTCACAAAGGCTCCGAGAT",
                "TATACCTCTAGTATTCGTCCTGTGCGGTAGTCAGTGGAAGCTAGATCACG",
                "ATTGGCTTGACCCGAGCGCGGAGCGATAAGATCGGAGGAGACGCGAACAG",
                "GGACGCGACCTTCCACGTGTCGCATGGTAGTGATACTTCTGCACCTCTTT",
                "AGGACCTATAGTGGTGGCGCTATATCGTGACATGGTCAAGGATATACTTT",
                "AAATCTTCGGCTTGACCCGTTAATACCCAACGCTGCAGCTATTGCTTTGC",
                "GTACTGTGGTCTGAAACTTTCATTCCCGTCTGATATCGCTAACTACGGCA",
                "TCGATCCAACACGCCACTTGGCTCCTTTCATAAGTCTTTCGCCATTGTGG",
                "TGATTTCCTGGTATAACGCATTGGAGGACTTGTCACAACGAGCCCTTGAC",
                "CCCGAGTACGGAGTTAGCTACGGAGGCTAACAAGCCGCAGACAGACTTAG",
                "GTGTTAACCACACACAGGAATCCGACCTCGTCACGCTGCTCGAGTACTCG",
                "TCCAATTACAAGAATAAGCGTAACTACATGGACGTAAGGCTACGGTGTTA",
                "TGTTATTGGATCGCGGAAAGTGCGGCTGGAACTCTGCCAGTCTTGCCTGG",
                "TCGGTTCCCACGCTAAATATAATGCTGCGACTCGAAGAGGCCGTCGTTAG",
                "ATCACTCAAGAGAAACCTCGTAAGACGTCACGCCTAGCAAGCTTCTGGGT",
                "CCATACACGAGGCAGTGGCATCATCTCGTTTATGGTGGTCAGGGATACAG",
                "TCGCCACAGGGAACCGCTTCGATGCATACGGTATTCTCTTAAACCACTGG",
                "TTGCGGCGGCTTTACTTGTGGGTGTATTAGTGCGTGGTGTTAGAACGAGG",
                "TCGTCTTCTCTGACTCTCCGTAGGTTAATTCGCTTAGCTATCTTGAACGC",
                "ACGTGACTTAGGACTGCTACCTTATGCTCTCATGGCCGGGCTTACGCCGC",
                "CCGTTAACAACCGAGCTTAAACACTGCAATAACTCCTGACATTGTCATAA",
                "TGTGATAGTACTGTGTAGGGTGAGCAGGGTCGAGGCCTGTGGTCTTCCTC",
                "GCGCAAAGGATGGAAATAGCTTGTGCTAATACACACTATCAATCGCCCGA",
                "TTCTCCTTGCTTAAGTGTGAAGGGCGAGCTTATATAACCCTCGAACTCTC",
                "CTATGAGGATGAGGGCGTGCAGAAGGCGGAATTTATGCTACTGAAATCCG",
                "ATATTCAGACCTAGCGCGGATTCTCGCCGTCGATAAGTGCGTTTGGAGAT",
                "AAGCTTTGCTAGTCTCACAGCGGAAACCCGGTCTAATGTTCCCGGTGCCA"
            ]
        };
        const res = await request(app)
            .post('/mutants')
            .send(body)
        expect(res.statusCode).toEqual(200)
        done()
    })

    afterAll( async () => {
        return dbConnection.closeConnection();
    })
})